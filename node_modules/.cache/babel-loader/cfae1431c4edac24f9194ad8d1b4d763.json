{"ast":null,"code":"var _jsxFileName = \"D:\\\\WORKS\\\\projet-js\\\\zc_react\\\\src\\\\components\\\\GoogleMaps.js\";\nimport React from \"react\";\nimport { Map, InfoWindow, Marker } from \"google-maps-react\";\nimport InfoContent from \"./InfoContent.js\";\nimport Icon from \"../images/car.png\";\nimport * as APIConfig from \"../constants/APIConfig\";\n\nconst GoogleMaps = ({\n  latitude,\n  longitude,\n  cars,\n  options,\n  motorisation\n}) => {\n  let renderMarkers;\n  const [state, setState] = React.useState({\n    lat: -21,\n    lng: 55.5,\n    stores: [],\n    showingInfoWindow: false,\n    // Hides or shows the InfoWindow\n    activeMarker: {},\n    // Shows the active marker upon click\n    selectedPlace: {\n      marque: \"\",\n      motorisation: \"\",\n      model: \"\"\n    }\n  });\n\n  const onMarkerClick = (props, marker, e) => setState({\n    selectedPlace: props,\n    activeMarker: marker,\n    showingInfoWindow: true\n  });\n\n  const onClose = props => {\n    if (state.showingInfoWindow) {\n      setState({\n        selectedPlace: \"\",\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  if (cars) {\n    renderMarkers = cars.map((data, index) => {\n      const type = options.filter(options => options.value == data.type).map(options => options.label)[0];\n      const moto = motorisation.filter(motorisation => motorisation.value == data.motorisation).map(motorisation => motorisation.label)[0];\n      return /*#__PURE__*/React.createElement(Marker, {\n        icon: {\n          width: \"10%\",\n          url: Icon,\n          anchor: window.google.maps.Point(16, 16),\n          scaledSize: window.google.maps.Size(32, 32)\n        },\n        key: index,\n        id: index,\n        position: {\n          lat: data.latitude,\n          lng: data.longitude\n        },\n        title: data.marque + \" \" + data.model,\n        name: {\n          marque: data.marque,\n          motorisation: moto,\n          type: type,\n          model: data.model,\n          img: data.photo,\n          adresse: data.adresse\n        },\n        color: \"red\",\n        onClick: onMarkerClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Map, {\n    style: {\n      width: \"90%\",\n      height: \"65%\"\n    },\n    google: window.google,\n    zoom: APIConfig.Zoom,\n    center: {\n      lat: latitude,\n      lng: longitude\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, renderMarkers, /*#__PURE__*/React.createElement(InfoWindow, {\n    marker: state.activeMarker,\n    visible: state.showingInfoWindow,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoContent, {\n    name: state.selectedPlace.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \" \")));\n};\n\nexport default GoogleMaps;","map":{"version":3,"sources":["D:/WORKS/projet-js/zc_react/src/components/GoogleMaps.js"],"names":["React","Map","InfoWindow","Marker","InfoContent","Icon","APIConfig","GoogleMaps","latitude","longitude","cars","options","motorisation","renderMarkers","state","setState","useState","lat","lng","stores","showingInfoWindow","activeMarker","selectedPlace","marque","model","onMarkerClick","props","marker","e","onClose","map","data","index","type","filter","value","label","moto","width","url","anchor","window","google","maps","Point","scaledSize","Size","img","photo","adresse","height","Zoom","name"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport { Map, InfoWindow, Marker } from \"google-maps-react\";\r\nimport InfoContent from \"./InfoContent.js\";\r\nimport Icon from \"../images/car.png\";\r\nimport * as APIConfig from \"../constants/APIConfig\";\r\n\r\nconst GoogleMaps = ({ latitude, longitude, cars, options, motorisation }) => {\r\n  let renderMarkers;\r\n  const [state, setState] = React.useState({\r\n    lat: -21,\r\n    lng: 55.5,\r\n    stores: [],\r\n    showingInfoWindow: false, // Hides or shows the InfoWindow\r\n    activeMarker: {}, // Shows the active marker upon click\r\n    selectedPlace: { marque: \"\", motorisation: \"\", model: \"\" },\r\n  });\r\n  const onMarkerClick = (props, marker, e) =>\r\n    setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true,\r\n    });\r\n  const onClose = (props) => {\r\n    if (state.showingInfoWindow) {\r\n      setState({\r\n        selectedPlace: \"\",\r\n        showingInfoWindow: false,\r\n        activeMarker: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (cars) {\r\n    renderMarkers = cars.map((data, index) => {\r\n      const type = options\r\n        .filter((options) => options.value == data.type)\r\n        .map((options) => options.label)[0];\r\n      const moto = motorisation\r\n        .filter((motorisation) => motorisation.value == data.motorisation)\r\n        .map((motorisation) => motorisation.label)[0];\r\n\r\n      return (\r\n        <Marker\r\n          icon={{\r\n            width: \"10%\",\r\n            url: Icon,\r\n            anchor: window.google.maps.Point(16, 16),\r\n            scaledSize: window.google.maps.Size(32, 32),\r\n          }}\r\n          key={index}\r\n          id={index}\r\n          position={{\r\n            lat: data.latitude,\r\n            lng: data.longitude,\r\n          }}\r\n          title={data.marque + \" \" + data.model}\r\n          name={{\r\n            marque: data.marque,\r\n            motorisation: moto,\r\n            type: type,\r\n            model: data.model,\r\n            img: data.photo,\r\n            adresse: data.adresse,\r\n          }}\r\n          color=\"red\"\r\n          onClick={onMarkerClick}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Map\r\n      style={{ width: \"90%\", height: \"65%\" }}\r\n      google={window.google}\r\n      zoom={APIConfig.Zoom}\r\n      center={{ lat: latitude, lng: longitude }}\r\n    >\r\n      {renderMarkers}\r\n\r\n      <InfoWindow\r\n        marker={state.activeMarker}\r\n        visible={state.showingInfoWindow}\r\n        onClose={onClose}\r\n      >\r\n        <InfoContent name={state.selectedPlace.name}> </InfoContent>\r\n      </InfoWindow>\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default GoogleMaps;\r\n"]},"metadata":{},"sourceType":"module"}